/* Z-INDEX */

// Declaration of all z-indexes
// From top to bottom in the list, equals from low to high in z-index values
// a z-index can be declared as just its name
// or as a map with a "name" property and optionally a "subZIndex" property
// in "subZIndex" one or more z-indexes can be declared
$zIndex: (
	(
		name: seeThroughScroll,
		subZIndex: (
			content,
			overlay,
			front
		),
	),
	overlay,
	(
		name: menuBar,
		subZIndex: (
			contextContent,
			bar,
			content
		),
	),
);

// Get a property from a map
// if $potentialMap is not actually a map, return $default
@function saveMapGet($potentialMap, $name, $default: null) {
	@if  type-of($potentialMap) == "map" {
		@return map-get($potentialMap, $name);
	} @else {
		@return $default;
	}
}


// returns a (sub)z-index for the provided names
// Examples:
// getZIndex(menuBar)
// getZIndex(menuBar content)
@function getZIndex($names) {
	$list: $zIndex;

	@each $name in $names {
		$match: null;
		$i: 1;

		@while not $match and $i <= length($list) {
			$item: nth($list, $i);

			@if saveMapGet($item, "name", $item) == $name {
				$match: $i + 1;
				$list: saveMapGet($item, "subZIndex", ());
			}
			$i: $i + 1;
		}
  	}

  	@if not $match {
  		@error "z-index “#{$names}” was not found";
  	}

	@return $match;
}

// Set the z-index by the zIndex name
// Examples:
// a {
// 	@include zIndex(overlay);
// 	@include zIndex(menuBar title);
// 	@include zIndex(menuBar);
// }
@mixin zIndex($names) {
	z-index: getZIndex($names);
}

