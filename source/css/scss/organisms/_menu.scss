// MENU

.is-menuOpened {
	overflow: hidden;
}

.container {
	position: relative;
	height: 100%;
	width: 100%;
	left: 0;
}

.menuBarContainer {
	position: fixed;
	left: 0;
	top: 0;
	bottom: 0;
	@include zIndex(menuBar);

	@include mqGreaterThan(large) {
		transform: translateX($menuBarWidthLarge - $menuBarWidthExtraLarge);
	}

	@include mqGreaterThan(extraExtraLarge) {
		transform: none;
	}

	@include mqGreaterThan(extraExtraExtraLarge) {
		left: 50%;
		margin-left: (-1 * map-get($maxPageWidth, rem) / 2);
	}

}

.menuBar {
	position: relative;
	height: 100%;
	width: $menuBarWidthSmall;
	box-shadow: 4px 0 0 0 rgba(getColor(zwart), 0.1);
	display: flex;
	flex-direction: column;
	justify-content: space-between;
	@include zIndex(menuBar bar);
	padding: {
		top: (2rem/16);
		bottom: (2rem/16);
	}

	@include mqGreaterThan(small) {
		width: $menuBarWidthLarge;
		padding: {
			top: (1rem/17);
			bottom: (1rem/17);
		}
	}

	@include mqGreaterThan(large) {
		width: $menuBarWidthExtraLarge;
		padding: {
			top: (1rem/18);
			bottom: (1rem/18);
		}
	}

	@include before("") {
			position: absolute;
			left: 0;
			top: 0;
			bottom: 0;
			width: 100%;
			transition: width 0.4s;
			background: getColor(hemelblauw light);
			background: linear-gradient(rgba(getColor(hemelblauw light), 0.9), rgba(getColor(mintgroen default), 0.9));
		}

	@include after("") {
		position: absolute;
		display: block;
		background: getColor(hemelblauw lightest);
		top: 0;
		bottom: 0;
		right: 100%;
		width: 2000px;
		width: 100vw;
		@include mqGreaterThan(extraExtraExtraLarge) {

			background: getColor(grijs lightest);
		}
	}

	&-context {
		margin-top: auto;
		padding-bottom: $halfSpace;
	}

	&--title {
		@extend .bravoHeading;
	}
}

.is-menuBar-retracted {
	@include mqLesserThan(small) {
		background: rgba(getColor(wit), 0.9);
		box-shadow: inset -1px 0 0 0 rgba(getColor(grijs light), 1);

		@include before("") {
			width: 0.25rem;
		}
		.menuBar-icon {
			fill: change-color(getColor(hemelblauw light), $lightness: 48%);
		}
	}
}

.menuBar-button {
	display: block;
	left: 0;
	background: none;
	border: none;
	outline: none;
	width: $menuBarWidthSmall;
	height: $menuBarWidthSmall;
	position: relative;
	padding: ($menuIconSizePaddingRatioSmall * $menuBarWidthSmall);
	transition: background-color 400ms;
	color: getColor(hemelblauw darkest);

	margin: {
		top: 1.1rem;
		bottom: 1.1rem;
	}

	@include mqGreaterThan(small) {
		width: $menuBarWidthLarge;
		height: $menuBarWidthLarge;
		padding: ($menuIconSizePaddingRatioLarge * $menuBarWidthLarge);
		margin: {
			top: (10rem/17);
			bottom: (10rem/17);
		}
	}

	@include mqGreaterThan(large) {
		width: $menuBarWidthLarge;
		height: $menuBarWidthLarge;
		margin: {
			top: (12rem/18);
			bottom: (12rem/18);
		}
	}

	@include mqGreaterThan(large) {
		width: $menuBarWidthExtraLarge;
	}

	@include hoverEtc {
		background-color: rgba(getColor(hemelblauw lightest), 0.7);
		color: inherit;
	}

	&--secondary {
		@include mqLesserThan(smallHeight) {
			display: none;
		}
		@include mqGreaterThan(small) {
			@include mqLesserThan(smallMediumHeight) {
				display: none;
			}
		}
	}

	&--context {

		@include before("") {
			position: absolute;
			left: 0;
			top: 0;
			bottom: 0;
			right: -5px;
			background-color: getColor(hemelblauw lightest);
			transform: translateX(-100%);
			transition: transform 200ms 100ms;
		}
		&.is-opened {
			background-color: none;

			@include hoverEtc {
				background-color: rgba(getColor(hemelblauw lightest), 0.7);
				color: inherit;
			}

			@include before() {
				transition: transform 200ms;
				transform: translateX(0);
			}
		}
	}

	&--backToTop {
		transition: transform 100ms;
		&.is-offScreen {
	    	transform: translateY(200%);
		}
	}

	&.is-opened {
		background-color: getColor(hemelblauw lightest);

		.menuBar-icon {
			fill: getColor(zwart);
			transform: scale(1.1);
		}
	}

	&-inner {
		@include mqGreaterThan(large) {
			display: flex;
			flex-direction: row;
			align-items: center;
		}
	}

	&-text {
		position: relative;

		@include mqLesserThan(large) {
			@include accHide;
		}
		@include mqGreaterThan(large) {
			text-align: right;
			text-transform: uppercase;
			font-size: getFontSize(menuLabels);
			order: 1;
			flex: 1 1 auto;
			padding-right: ($menuIconSizePaddingRatioLarge * $menuBarWidthLarge);

		}
		@include mqGreaterThan(extraExtraLarge) {
			padding-right: $pad-half;
		}

	}
}

// SVG Icon
.menuBar-icon {
	width: $menuIconSizeRatioSmall * $menuBarWidthSmall;
	height: $menuIconSizeRatioSmall * $menuBarWidthSmall;
	fill: getColor(hemelblauw darkest);
	transition: all 0.2s ease-in-out;
	opacity: 0.9;

	@include mqGreaterThan(small) {
		width: $menuIconSizeRatioLarge * $menuBarWidthLarge;
		height: $menuIconSizeRatioLarge * $menuBarWidthLarge;
	}

	@include mqGreaterThan(large) {
		order: 2;
		flex: 0 0 auto;
	}

	.no-touch .menuBar-button:hover & {
		//stroke: getColor(wit);
		//stroke-width: 1px;
		//fill-opacity:0.1;
		//stroke-opacity:0.9;
		fill: getColor(zwart);
		//filter: url(../../images/svg-filters.svg#shadow);
		//fill: url("../../images/svg-filters.svg#gradient");
		transform: scale(1.1);
	}
}

.menuBar-sideContent {
	position: absolute;
	right: 100%;
	top: 0;
	bottom: 0;
	z-index: 10;
	background: getColor(hemelblauw lightest);
	min-width: 15rem;
	height: 100%;
	max-width: calc(100vw - #{$menuBarWidthSmall});
	width: 40rem;
	@include zIndex(menuBar content);

	@include mqGreaterThan(small) {
		max-width: calc(100vw - #{$menuBarWidthLarge});
	}
	@include mqGreaterThan(large) {
		max-width: calc(100vw - #{$menuBarWidthExtraLarge});
	}
}

.menuBar-overlayContent {
	position: fixed;
	bottom: 0;
	left: 0;
	background: getColor(hemelblauw lightest);
	outline: 4px solid hsla(0, 0%, 0%, 0.05);
	border-left: $menuBarWidthSmall solid transparent;
	width: 32rem;
	max-width: 90vw;
	max-height: calc(100vh - 2rem);
	margin-top: 1rem;
	margin-bottom: 1rem;
	padding: 1rem;

	@include zIndex(menuBar contextContent);

	@include mqGreaterThan(small) {
		border-left-width: $menuBarWidthLarge;
	}

	@include mqGreaterThan(large) {
		border-left-width: $menuBarWidthExtraLarge;
	}

	@include mqGreaterThan(extraExtraExtraLarge) {
		left: 50%;
		margin-left: (-1 * map-get($maxPageWidth, rem) / 2);
	}
}