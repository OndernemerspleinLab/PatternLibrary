// MEDIAQUERIES

$mediaQueries: (
	// 384px
	extraSmall: (
		greater: "(min-width: 24em)",
		lesser: "(max-width: #{24em - (1/16)})"
	),
	// 560px
	small: (
		greater: "(min-width: 35em)",
		lesser: "(max-width: #{35em - (1/16)})"
	),
	// 640px
	smallMedium: (
		greater: "(min-width: 40em)",
		lesser: "(max-width: #{40em - (1/16)})"
	),
	// 720px
	medium: (
		greater: "(min-width: 45em)",
		lesser: "(max-width: #{45em - (1/16)})"
	),
	// 800px
	mediumLarge: (
		greater: "(min-width: 50em)",
		lesser: "(max-width: #{50em - (1/16)})"
	),
	// 880px
	large: (
		greater: "(min-width: 55em)",
		lesser: "(max-width: #{55em - (1/16)})"
	),
	// 912px
	extraLarge: (
		greater: "(min-width: 57em)",
		lesser: "(max-width: #{57em - (1/16)})"
	),
	// 1200px
	extraExtraLarge: (
		greater: "(min-width: 75em)",
		lesser: "(max-width: #{75em - (1/16)})"
	),
);

@function getMediaQuery($name, $type) {
	@return mapDeepGet($mediaQueries, $name $type);
}

@mixin mq($type, $name) {
	@if ($type == between) {
		$smallestMq: getMediaQuery($smallest, greater);
		$largestMq: getMediaQuery($largest, lesser);

		@media #{$smallestMq} and #{$largestMq} {
			@content;
		};
	} @else {
		@media #{getMediaQuery($name, $type)} {
			@content;
		}
	}
}

@mixin mqGreaterThan($name) {
	@include mq(greater, $name) { @content; };
};

@mixin mqLesserThan($name) {
	@include mq(lesser, $name) { @content; };
};

@mixin mqBetween($smallest, $largest) {
	@include mq(between, $name) { @content; };
};

@mixin setPropWithMq($mqType, $propertyName, $map) {
	@each $tuple in $map {

		$mq: nth($tuple, 1);
		$value: nth($tuple, 2);

		@if ($mq == all) {
			#{$propertyName}: $value;
		} @else {
			@include mq($mqType, $mq) {
				#{$propertyName}: $value;
			}
		}
	}
}