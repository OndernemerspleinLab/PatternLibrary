// MEDIAQUERIES


// Definition of all breakpoints
// mediaqueryes are defined for both
// greater than and smaller than the breakpoint
// These values are not directly used
// Instead use the mixins below
$mediaQueries: (
	// 384px
	extraSmall: (
		greater: "(min-width: 24em)",
		lesser: "(max-width: #{24em - (1/16)})"
	),
	// 560px
	small: (
		greater: "(min-width: 35em)",
		lesser: "(max-width: #{35em - (1/16)})"
	),
	// 640px
	smallMedium: (
		greater: "(min-width: 40em)",
		lesser: "(max-width: #{40em - (1/16)})"
	),
	// 720px
	medium: (
		greater: "(min-width: 45em)",
		lesser: "(max-width: #{45em - (1/16)})"
	),
	// 800px
	mediumLarge: (
		greater: "(min-width: 50em)",
		lesser: "(max-width: #{50em - (1/16)})"
	),
	// 880px
	large: (
		greater: "(min-width: 55em)",
		lesser: "(max-width: #{55em - (1/16)})"
	),
	// 912px
	extraLarge: (
		greater: "(min-width: 57em)",
		lesser: "(max-width: #{57em - (1/16)})"
	),
	// 1280px
	extraExtraLarge: (
		greater: "(min-width: 70em)",
		lesser: "(max-width: #{70em - (1/16)})"
	),
);

// Not for direct usage, it is used by the mixins below
// get a mediaquery by its name and type
@function getMediaQuery($name, $type) {
	@return mapDeepGet($mediaQueries, $name $type);
}

// Not for direct usage, it is used by the mixins below
// type is "greater", "lesser" or "between"
// When the type is is "between", the $name of two breakpoints should be provided
@mixin mq($type, $name) {
	@if ($type == between) {
		$smallest: nth($name, 0);
		$largest: nth($name, 1);
		$smallestMq: getMediaQuery($smallest, greater);
		$largestMq: getMediaQuery($largest, lesser);

		@media #{$smallestMq} and #{$largestMq} {
			@content;
		};
	} @else {
		@media #{getMediaQuery($name, $type)} {
			@content;
		}
	}
}

// Mixin for mediaquery that is greater than the breakpoint provided in $name
// Example:
// @include mqGreaterThan(small) { p { margin: 1rem 0; } };
@mixin mqGreaterThan($name) {
	@include mq(greater, $name) { @content; };
};

// Mixin for mediaquery that is lesser than the breakpoint provided in $name
// Example:
// @include mqLesserThan(large) { p { margin: 1rem 0; } };
@mixin mqLesserThan($name) {
	@include mq(lesser, $name) { @content; };
};

// Mixin for mediaquery that is between the two breakpoints provided in $names
// Example:
// @include mqBetween(small, medium) { p { margin: 1rem 0; } };
@mixin mqBetween($names) {
	@include mq(between, $names) { @content; };
};

// When a property has to have a dirrent value in multiple
// breakpoint ranges setPropWithMq provides a
// convinient way of setting the values
// $mqType is "lesser", "greater" or "between"
// $propertyName is the name of the css property, for example "padding"
// $map is a set of key value pairs, where the key is either the name of a breakpoint
// or "all". When "all" is used the property hets set outside of any media queries
// Example:
// @include setPropWithMq(greater, width, (
// 	all: 100%,
// 	smallMedium: calc(#{100%*1/2} - #{$space}),
// 	mediumLarge: calc(#{100%*1/3} - #{$space})
// ));
@mixin setPropWithMq($mqType, $propertyName, $map) {
	@each $tuple in $map {

		$mq: nth($tuple, 1);
		$value: nth($tuple, 2);

		@if ($mq == all) {
			#{$propertyName}: $value;
		} @else {
			@include mq($mqType, $mq) {
				#{$propertyName}: $value;
			}
		}
	}
}