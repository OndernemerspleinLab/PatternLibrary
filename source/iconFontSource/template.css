/* Generated by grunt-webfont */

<% if (fontfaceStyles) { %>@font-face {
	font-family: "<%= fontBaseName %>";<% if (fontSrc1) { %>
	src: <%= fontSrc1 %>;<% }%>
	src: <%= fontSrc2 %>;
	font-weight: bold;
	font-style: normal;
}
<% } %>
<% if (baseStyles) { %>@mixin <%= baseClass %> {
	display: inline;
	font-family: "<%= fontBaseName %>";
	font-weight: normal;
	font-style: normal;
	speak: none;
	text-decoration: none;
	text-transform: none;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	line-height: 1.25;
}
<% } %>

%<%= baseClass %> {
	@include <%= baseClass %>;
}

<%
	function glyphsToPaths(glyphs, codepoints) {
		return glyphs.map(function (glyph, glyphId) {
			var glyphPath = glyph.split("/").concat(codepoints[glyphId]);
			return glyphPath;
		});
	}

	function reduceGlyphPath(memo, glyphPath) {
		var key;
		if  (glyphPath.length === 2) {
			key = glyphPath[0];
			value = glyphPath[1];
			memo[key] = value;
		} else if (glyphPath.length > 2) {
			key = glyphPath.shift();
			memo[key] = memo[key] || [];
			memo[key].push(glyphPath);
		}

		return memo;
	}

	function reduceGlyphSubpaths(memo, group, groupName) {
		if (_(group).isArray()) {
			memo[groupName] = groupGlyphPaths(group);
		} else {
			memo[groupName] = group;
		}

		return memo;

	}

	function groupGlyphPaths(glyphPaths) {
		var groups = _(glyphPaths).reduce(reduceGlyphPath, {});
		groups = _(groups).reduce(reduceGlyphSubpaths, {});
		return groups;
	}

	function groupGlyphs(glyphs, codepoints) {
		var glyphPaths = glyphsToPaths(glyphs, codepoints);

		return groupGlyphPaths(glyphPaths);
	}

	var glyphObject = groupGlyphs(glyphs, codepoints);
%>

<%
	function toScssMap(glyphObject, indentation) {
		indentation = indentation || "";
		var oldIndentation = indentation;
		indentation += "\t";

		var scssMapItems = _(glyphObject).map(function (value, key) {
			if (_(value).isObject()) {
				value = toScssMap(value, indentation);
			} else {
				value = '"\\' + value + '"';
			}

			key = '"' + key + '"';

			return [indentation, key, ": ", value].join("");
		});
		var scssMap = ["(\n", scssMapItems.join(",\n"), "\n", oldIndentation, ")"].join("");

		return scssMap;
	}

	var iconScssMap = toScssMap(glyphObject);
%>

<%= objectName %>: <%= iconScssMap %>;

@function <%= functionName %>($iconNames) {
	@return mapDeepGet(<%= objectName %>, $iconNames);
};